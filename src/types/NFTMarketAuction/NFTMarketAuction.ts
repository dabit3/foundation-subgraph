// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MarketFeesUpdated extends ethereum.Event {
  get params(): MarketFeesUpdated__Params {
    return new MarketFeesUpdated__Params(this);
  }
}

export class MarketFeesUpdated__Params {
  _event: MarketFeesUpdated;

  constructor(event: MarketFeesUpdated) {
    this._event = event;
  }

  get primaryFoundationFeeBasisPoints(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get secondaryFoundationFeeBasisPoints(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get secondaryCreatorFeeBasisPoints(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReserveAuctionBidPlaced extends ethereum.Event {
  get params(): ReserveAuctionBidPlaced__Params {
    return new ReserveAuctionBidPlaced__Params(this);
  }
}

export class ReserveAuctionBidPlaced__Params {
  _event: ReserveAuctionBidPlaced;

  constructor(event: ReserveAuctionBidPlaced) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ReserveAuctionCanceled extends ethereum.Event {
  get params(): ReserveAuctionCanceled__Params {
    return new ReserveAuctionCanceled__Params(this);
  }
}

export class ReserveAuctionCanceled__Params {
  _event: ReserveAuctionCanceled;

  constructor(event: ReserveAuctionCanceled) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ReserveAuctionCanceledByAdmin extends ethereum.Event {
  get params(): ReserveAuctionCanceledByAdmin__Params {
    return new ReserveAuctionCanceledByAdmin__Params(this);
  }
}

export class ReserveAuctionCanceledByAdmin__Params {
  _event: ReserveAuctionCanceledByAdmin;

  constructor(event: ReserveAuctionCanceledByAdmin) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ReserveAuctionConfigUpdated extends ethereum.Event {
  get params(): ReserveAuctionConfigUpdated__Params {
    return new ReserveAuctionConfigUpdated__Params(this);
  }
}

export class ReserveAuctionConfigUpdated__Params {
  _event: ReserveAuctionConfigUpdated;

  constructor(event: ReserveAuctionConfigUpdated) {
    this._event = event;
  }

  get minPercentIncrementInBasisPoints(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxBidIncrementRequirement(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get extensionDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get goLiveDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ReserveAuctionCreated extends ethereum.Event {
  get params(): ReserveAuctionCreated__Params {
    return new ReserveAuctionCreated__Params(this);
  }
}

export class ReserveAuctionCreated__Params {
  _event: ReserveAuctionCreated;

  constructor(event: ReserveAuctionCreated) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get extensionDuration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get auctionId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ReserveAuctionFinalized extends ethereum.Event {
  get params(): ReserveAuctionFinalized__Params {
    return new ReserveAuctionFinalized__Params(this);
  }
}

export class ReserveAuctionFinalized__Params {
  _event: ReserveAuctionFinalized;

  constructor(event: ReserveAuctionFinalized) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get f8nFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get creatorFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get ownerRev(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ReserveAuctionUpdated extends ethereum.Event {
  get params(): ReserveAuctionUpdated__Params {
    return new ReserveAuctionUpdated__Params(this);
  }
}

export class ReserveAuctionUpdated__Params {
  _event: ReserveAuctionUpdated;

  constructor(event: ReserveAuctionUpdated) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawPending extends ethereum.Event {
  get params(): WithdrawPending__Params {
    return new WithdrawPending__Params(this);
  }
}

export class WithdrawPending__Params {
  _event: WithdrawPending;

  constructor(event: WithdrawPending) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NFTMarketAuction__getFeeConfigResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class NFTMarketAuction__getFeesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class NFTMarketAuction__getReserveAuctionResultValue0Struct extends ethereum.Tuple {
  get nftContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get duration(): BigInt {
    return this[3].toBigInt();
  }

  get extensionDuration(): BigInt {
    return this[4].toBigInt();
  }

  get endTime(): BigInt {
    return this[5].toBigInt();
  }

  get bidder(): Address {
    return this[6].toAddress();
  }

  get amount(): BigInt {
    return this[7].toBigInt();
  }
}

export class NFTMarketAuction__getReserveAuctionConfigResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class NFTMarketAuction extends ethereum.SmartContract {
  static bind(address: Address): NFTMarketAuction {
    return new NFTMarketAuction("NFTMarketAuction", address);
  }

  getFeeConfig(): NFTMarketAuction__getFeeConfigResult {
    let result = super.call(
      "getFeeConfig",
      "getFeeConfig():(uint256,uint256,uint256)",
      []
    );

    return new NFTMarketAuction__getFeeConfigResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getFeeConfig(): ethereum.CallResult<
    NFTMarketAuction__getFeeConfigResult
  > {
    let result = super.tryCall(
      "getFeeConfig",
      "getFeeConfig():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarketAuction__getFeeConfigResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getFees(
    nftContract: Address,
    tokenId: BigInt,
    price: BigInt
  ): NFTMarketAuction__getFeesResult {
    let result = super.call(
      "getFees",
      "getFees(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );

    return new NFTMarketAuction__getFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getFees(
    nftContract: Address,
    tokenId: BigInt,
    price: BigInt
  ): ethereum.CallResult<NFTMarketAuction__getFeesResult> {
    let result = super.tryCall(
      "getFees",
      "getFees(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarketAuction__getFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getFoundationTreasury(): Address {
    let result = super.call(
      "getFoundationTreasury",
      "getFoundationTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getFoundationTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFoundationTreasury",
      "getFoundationTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIsPrimary(nftContract: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "getIsPrimary",
      "getIsPrimary(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_getIsPrimary(
    nftContract: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getIsPrimary",
      "getIsPrimary(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getMinBidAmount(auctionId: BigInt): BigInt {
    let result = super.call(
      "getMinBidAmount",
      "getMinBidAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBigInt();
  }

  try_getMinBidAmount(auctionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinBidAmount",
      "getMinBidAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingWithdrawal(user: Address): BigInt {
    let result = super.call(
      "getPendingWithdrawal",
      "getPendingWithdrawal(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getPendingWithdrawal(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingWithdrawal",
      "getPendingWithdrawal(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveAuction(
    auctionId: BigInt
  ): NFTMarketAuction__getReserveAuctionResultValue0Struct {
    let result = super.call(
      "getReserveAuction",
      "getReserveAuction(uint256):((address,uint256,address,uint256,uint256,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toTuple() as NFTMarketAuction__getReserveAuctionResultValue0Struct;
  }

  try_getReserveAuction(
    auctionId: BigInt
  ): ethereum.CallResult<
    NFTMarketAuction__getReserveAuctionResultValue0Struct
  > {
    let result = super.tryCall(
      "getReserveAuction",
      "getReserveAuction(uint256):((address,uint256,address,uint256,uint256,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as NFTMarketAuction__getReserveAuctionResultValue0Struct
    );
  }

  getReserveAuctionConfig(): NFTMarketAuction__getReserveAuctionConfigResult {
    let result = super.call(
      "getReserveAuctionConfig",
      "getReserveAuctionConfig():(uint256,uint256)",
      []
    );

    return new NFTMarketAuction__getReserveAuctionConfigResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getReserveAuctionConfig(): ethereum.CallResult<
    NFTMarketAuction__getReserveAuctionConfigResult
  > {
    let result = super.tryCall(
      "getReserveAuctionConfig",
      "getReserveAuctionConfig():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarketAuction__getReserveAuctionConfigResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getReserveAuctionIdFor(nftContract: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "getReserveAuctionIdFor",
      "getReserveAuctionIdFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReserveAuctionIdFor(
    nftContract: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveAuctionIdFor",
      "getReserveAuctionIdFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AdminCancelReserveAuctionCall extends ethereum.Call {
  get inputs(): AdminCancelReserveAuctionCall__Inputs {
    return new AdminCancelReserveAuctionCall__Inputs(this);
  }

  get outputs(): AdminCancelReserveAuctionCall__Outputs {
    return new AdminCancelReserveAuctionCall__Outputs(this);
  }
}

export class AdminCancelReserveAuctionCall__Inputs {
  _call: AdminCancelReserveAuctionCall;

  constructor(call: AdminCancelReserveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AdminCancelReserveAuctionCall__Outputs {
  _call: AdminCancelReserveAuctionCall;

  constructor(call: AdminCancelReserveAuctionCall) {
    this._call = call;
  }
}

export class AdminUpdateConfigCall extends ethereum.Call {
  get inputs(): AdminUpdateConfigCall__Inputs {
    return new AdminUpdateConfigCall__Inputs(this);
  }

  get outputs(): AdminUpdateConfigCall__Outputs {
    return new AdminUpdateConfigCall__Outputs(this);
  }
}

export class AdminUpdateConfigCall__Inputs {
  _call: AdminUpdateConfigCall;

  constructor(call: AdminUpdateConfigCall) {
    this._call = call;
  }

  get minPercentIncrementInBasisPoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get primaryF8nFeeBasisPoints(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get secondaryF8nFeeBasisPoints(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get secondaryCreatorFeeBasisPoints(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AdminUpdateConfigCall__Outputs {
  _call: AdminUpdateConfigCall;

  constructor(call: AdminUpdateConfigCall) {
    this._call = call;
  }
}

export class CancelReserveAuctionCall extends ethereum.Call {
  get inputs(): CancelReserveAuctionCall__Inputs {
    return new CancelReserveAuctionCall__Inputs(this);
  }

  get outputs(): CancelReserveAuctionCall__Outputs {
    return new CancelReserveAuctionCall__Outputs(this);
  }
}

export class CancelReserveAuctionCall__Inputs {
  _call: CancelReserveAuctionCall;

  constructor(call: CancelReserveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelReserveAuctionCall__Outputs {
  _call: CancelReserveAuctionCall;

  constructor(call: CancelReserveAuctionCall) {
    this._call = call;
  }
}

export class CreateReserveAuctionCall extends ethereum.Call {
  get inputs(): CreateReserveAuctionCall__Inputs {
    return new CreateReserveAuctionCall__Inputs(this);
  }

  get outputs(): CreateReserveAuctionCall__Outputs {
    return new CreateReserveAuctionCall__Outputs(this);
  }
}

export class CreateReserveAuctionCall__Inputs {
  _call: CreateReserveAuctionCall;

  constructor(call: CreateReserveAuctionCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateReserveAuctionCall__Outputs {
  _call: CreateReserveAuctionCall;

  constructor(call: CreateReserveAuctionCall) {
    this._call = call;
  }
}

export class FinalizeReserveAuctionCall extends ethereum.Call {
  get inputs(): FinalizeReserveAuctionCall__Inputs {
    return new FinalizeReserveAuctionCall__Inputs(this);
  }

  get outputs(): FinalizeReserveAuctionCall__Outputs {
    return new FinalizeReserveAuctionCall__Outputs(this);
  }
}

export class FinalizeReserveAuctionCall__Inputs {
  _call: FinalizeReserveAuctionCall;

  constructor(call: FinalizeReserveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeReserveAuctionCall__Outputs {
  _call: FinalizeReserveAuctionCall;

  constructor(call: FinalizeReserveAuctionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class UpdateReserveAuctionCall extends ethereum.Call {
  get inputs(): UpdateReserveAuctionCall__Inputs {
    return new UpdateReserveAuctionCall__Inputs(this);
  }

  get outputs(): UpdateReserveAuctionCall__Outputs {
    return new UpdateReserveAuctionCall__Outputs(this);
  }
}

export class UpdateReserveAuctionCall__Inputs {
  _call: UpdateReserveAuctionCall;

  constructor(call: UpdateReserveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateReserveAuctionCall__Outputs {
  _call: UpdateReserveAuctionCall;

  constructor(call: UpdateReserveAuctionCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawForCall extends ethereum.Call {
  get inputs(): WithdrawForCall__Inputs {
    return new WithdrawForCall__Inputs(this);
  }

  get outputs(): WithdrawForCall__Outputs {
    return new WithdrawForCall__Outputs(this);
  }
}

export class WithdrawForCall__Inputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawForCall__Outputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }
}
